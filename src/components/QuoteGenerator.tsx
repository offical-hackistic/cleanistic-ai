import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { 
  FileText, 
  Send, 
  Download, 
  User, 
  Mail, 
  Phone, 
  MapPin,
  Calendar,
  DollarSign,
  CheckCircle
} from 'lucide-react';
import { PropertyAnalysis, Quote } from '@/types/api';
import { apiService } from '@/services/api';
import { toast } from 'sonner';

interface QuoteGeneratorProps {
  analysis: PropertyAnalysis;
  onQuoteGenerated?: (quote: Quote) => void;
}

export const QuoteGenerator: React.FC<QuoteGeneratorProps> = ({ 
  analysis, 
  onQuoteGenerated 
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [step, setStep] = useState<'info' | 'generating' | 'complete'>('info');
  const [customerInfo, setCustomerInfo] = useState({
    name: '',
    email: '',
    phone: '',
    address: analysis.address,
  });
  const [notes, setNotes] = useState('');
  const [generatedQuote, setGeneratedQuote] = useState<Quote | null>(null);

  const handleGenerateQuote = async () => {
    if (!customerInfo.name || !customerInfo.email) {
      toast.error('Please fill in required customer information');
      return;
    }

    setStep('generating');

    try {
      const result = await apiService.generateQuote(analysis.id, customerInfo);
      
      if (result.success && result.data) {
        setGeneratedQuote(result.data);
        setStep('complete');
        onQuoteGenerated?.(result.data);
        toast.success('Quote generated successfully!');
      } else {
        throw new Error(result.error?.message || 'Failed to generate quote');
      }
    } catch (error) {
      setStep('info');
      toast.error(error instanceof Error ? error.message : 'Failed to generate quote');
    }
  };

  const handleSendQuote = () => {
    toast.success(`Quote sent to ${customerInfo.email}`);
    setIsOpen(false);
    resetForm();
  };

  const handleDownloadQuote = () => {
    // Simulate PDF download
    const element = document.createElement('a');
    const file = new Blob([generateQuoteContent()], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `quote-${generatedQuote?.id}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    toast.success('Quote downloaded');
  };

  const generateQuoteContent = (): string => {
    if (!generatedQuote) return '';
    
    return `CLEANISTIC AI - PROPERTY CLEANING QUOTE

Customer Information:
Name: ${customerInfo.name}
Email: ${customerInfo.email}
Phone: ${customerInfo.phone}
Property Address: ${customerInfo.address}

Property Analysis:
- Size: ${analysis.propertyData.size.toLocaleString()} sq ft
- Stories: ${analysis.propertyData.stories}
- Windows: ${analysis.features.windows}
- Doors: ${analysis.features.doors}
- Skylights: ${analysis.features.skylights}
- Gutter Length: ${analysis.features.gutterFeet} ft
- Confidence: ${Math.round(analysis.confidence * 100)}%

Services & Pricing:
${analysis.services.map(service => 
  `- ${service.service.replace('_', ' ').toUpperCase()}: $${service.price.toLocaleString()} (Est. ${service.details.timeEstimate} mins)`
).join('\n')}

TOTAL ESTIMATE: $${analysis.totalEstimate.toLocaleString()}

Valid until: ${new Date(generatedQuote.validUntil).toLocaleDateString()}
Quote ID: ${generatedQuote.id}

Generated by Cleanistic AI - Property Analysis Platform
`;
  };

  const resetForm = () => {
    setStep('info');
    setCustomerInfo({
      name: '',
      email: '',
      phone: '',
      address: analysis.address,
    });
    setNotes('');
    setGeneratedQuote(null);
  };

  if (step === 'complete' && generatedQuote) {
    return (
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogTrigger asChild>
          <Button>
            <FileText className="h-4 w-4 mr-2" />
            Generate Quote
          </Button>
        </DialogTrigger>
        <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5 text-green-500" />
              Quote Generated Successfully
            </DialogTitle>
          </DialogHeader>

          <div className="space-y-6">
            <Card className="p-4 bg-green-50 border-green-200">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="font-semibold text-green-800">Quote #{generatedQuote.id}</h3>
                  <p className="text-sm text-green-600">
                    Valid until {new Date(generatedQuote.validUntil).toLocaleDateString()}
                  </p>
                </div>
                <Badge variant="outline" className="bg-green-100 text-green-800 border-green-300">
                  {generatedQuote.status}
                </Badge>
              </div>
            </Card>

            <div className="grid md:grid-cols-2 gap-4">
              <Card className="p-4">
                <h4 className="font-semibold mb-3 flex items-center gap-2">
                  <User className="h-4 w-4" />
                  Customer Information
                </h4>
                <div className="space-y-2 text-sm">
                  <div className="flex items-center gap-2">
                    <User className="h-3 w-3 text-muted-foreground" />
                    {customerInfo.name}
                  </div>
                  <div className="flex items-center gap-2">
                    <Mail className="h-3 w-3 text-muted-foreground" />
                    {customerInfo.email}
                  </div>
                  <div className="flex items-center gap-2">
                    <Phone className="h-3 w-3 text-muted-foreground" />
                    {customerInfo.phone}
                  </div>
                  <div className="flex items-center gap-2">
                    <MapPin className="h-3 w-3 text-muted-foreground" />
                    {customerInfo.address}
                  </div>
                </div>
              </Card>

              <Card className="p-4">
                <h4 className="font-semibold mb-3 flex items-center gap-2">
                  <DollarSign className="h-4 w-4" />
                  Pricing Summary
                </h4>
                <div className="space-y-2">
                  {analysis.services.map((service, index) => (
                    <div key={index} className="flex justify-between text-sm">
                      <span className="capitalize">{service.service.replace('_', ' ')}</span>
                      <span>${service.price.toLocaleString()}</span>
                    </div>
                  ))}
                  <Separator />
                  <div className="flex justify-between font-semibold">
                    <span>Total</span>
                    <span>${analysis.totalEstimate.toLocaleString()}</span>
                  </div>
                </div>
              </Card>
            </div>

            <div className="flex gap-2">
              <Button onClick={handleSendQuote} className="flex-1">
                <Send className="h-4 w-4 mr-2" />
                Send to Customer
              </Button>
              <Button variant="outline" onClick={handleDownloadQuote} className="flex-1">
                <Download className="h-4 w-4 mr-2" />
                Download PDF
              </Button>
            </div>

            <Button 
              variant="outline" 
              onClick={resetForm}
              className="w-full"
            >
              Generate New Quote
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  if (step === 'generating') {
    return (
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogTrigger asChild>
          <Button>
            <FileText className="h-4 w-4 mr-2" />
            Generate Quote
          </Button>
        </DialogTrigger>
        <DialogContent>
          <div className="text-center space-y-4 py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto" />
            <h3 className="text-lg font-semibold">Generating Quote</h3>
            <p className="text-muted-foreground">
              Creating your professional quote...
            </p>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <FileText className="h-4 w-4 mr-2" />
          Generate Quote
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Generate Customer Quote</DialogTitle>
        </DialogHeader>

        <div className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="customerName">Customer Name *</Label>
              <Input
                id="customerName"
                placeholder="John Doe"
                value={customerInfo.name}
                onChange={(e) => setCustomerInfo(prev => ({ ...prev, name: e.target.value }))}
                required
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="customerEmail">Email *</Label>
              <Input
                id="customerEmail"
                type="email"
                placeholder="john@example.com"
                value={customerInfo.email}
                onChange={(e) => setCustomerInfo(prev => ({ ...prev, email: e.target.value }))}
                required
              />
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="customerPhone">Phone Number</Label>
              <Input
                id="customerPhone"
                placeholder="(555) 123-4567"
                value={customerInfo.phone}
                onChange={(e) => setCustomerInfo(prev => ({ ...prev, phone: e.target.value }))}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="customerAddress">Property Address</Label>
              <Input
                id="customerAddress"
                value={customerInfo.address}
                onChange={(e) => setCustomerInfo(prev => ({ ...prev, address: e.target.value }))}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="notes">Additional Notes</Label>
            <Textarea
              id="notes"
              placeholder="Special instructions, access notes, etc..."
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              rows={3}
            />
          </div>

          <Card className="p-4 bg-muted/50">
            <h4 className="font-semibold mb-2">Quote Preview</h4>
            <div className="space-y-1 text-sm">
              <div className="flex justify-between">
                <span>Property Size:</span>
                <span>{analysis.propertyData.size.toLocaleString()} sq ft</span>
              </div>
              <div className="flex justify-between">
                <span>Total Services:</span>
                <span>{analysis.services.length}</span>
              </div>
              <div className="flex justify-between font-semibold">
                <span>Estimated Total:</span>
                <span>${analysis.totalEstimate.toLocaleString()}</span>
              </div>
            </div>
          </Card>

          <div className="flex gap-2">
            <Button onClick={handleGenerateQuote} className="flex-1">
              <FileText className="h-4 w-4 mr-2" />
              Generate Quote
            </Button>
            <Button 
              variant="outline" 
              onClick={() => setIsOpen(false)} 
              className="flex-1"
            >
              Cancel
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};
